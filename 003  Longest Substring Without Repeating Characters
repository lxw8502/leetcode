class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> se = new HashSet<>();
        int len = 0;
        for(int i = 0; i < s.length(); i++){
            int temp = 0;
            for(int j = i; j < s.length(); j++){
                if(se.add(s.charAt(j))){
                    temp++;
                }else{
                    break;
                }
            }
            if(temp>len){
                len = temp;
            }
            se.clear();
        }
        return len;
    }
}

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> hm = new HashMap<>();
        int len = 0;
        for(int i = 0, j = 0; j < s.length();j++){
            if(hm.containsKey(s.charAt(j))){
                i = Math.max(i, hm.get(s.charAt(j))+1);
            }
            hm.put(s.charAt(j), j);
            len = Math.max(len,j-i+1);

        }
        return len;
    }
}
