class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        int level = 0;
        int[] visited = new int[nums.length];
        List<Integer> out = new ArrayList<>();
        Arrays.sort(nums);
        pernuteUniqueSub(res, level, visited, nums, out);
        return res;
    }
    private void pernuteUniqueSub(List<List<Integer>> res, int level, int[] visited, int[] nums, List<Integer> out){
        if(level >= nums.length){
            res.add(out);
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(visited[i] == 1) continue;
            if(i > 0 && nums[i] == nums[i-1] && visited[i-1] == 0) continue;
            List<Integer> temp = new ArrayList<>();
            temp.addAll(out);
            temp.add(nums[i]);
            visited[i] = 1;
            pernuteUniqueSub(res, level+1, visited, nums, temp);
            visited[i] = 0;
        }
    }
}

