class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<>();
        combinationSumSub(candidates, target, 0, out, res);
        return res;
    }
    private void combinationSumSub(int[] candidates, int target, int start, List<Integer> out, List<List<Integer>> res){
        if(target < 0 ) return;
        if(target == 0){
            List<Integer> dist = new ArrayList<>();
            dist.addAll(out);
            res.add(dist);
            return;
        } 
        for(int i = start; i < candidates.length; i++){
            out.add(candidates[i]);
            combinationSumSub(candidates, target - candidates[i], i, out, res);
            out.remove(out.size()-1);
        }
    }
}
