class Solution {
    public int totalNQueens(int n) {
        int res = 0;
        int[] out = new int[n];
        // for(int i = 0; i < n; n++){
        //     out[i] = -1;
        // }
        res = helper(res, out, 0);
        return res;
    }
    private int helper(int res, int[] out,int n){
        if(n >= out.length) {
            res++;
            return res;
        }
        for(int m = 0; m < out.length; m++){
            if(isValid(out, n, m)){
                out[n] = m;
                res = helper(res, out, n+1);
                // out[n] = -1;
            }
        }
        return res;
    }
    private boolean isValid(int[] out, int row, int col){
        for(int i = 0; i < row; i++){
            if(col == out[i] || Math.abs(row - i) == Math.abs(col - out[i])){
                return false;
            }
        }
        return true;
    }
}


class Solution {
    public int totalNQueens(int n) {
        int res = 0;
        boolean[] col = new boolean[n];
        boolean[] diag = new boolean[2*n];
        boolean[] antidiag = new boolean[2*n];
        res = helper(res, col, diag, antidiag, 0);
        return res;
    }
    private int helper(int res, boolean[] col, boolean[] diag, boolean[] antidiag ,int n){
        if(n >= col.length) {
            res++;
            return res;
        }
        for(int m = 0; m < col.length; m++){
            if(col[m] || diag[m - n + col.length] || antidiag[m + n]){
                continue;
            }
            col[m] = true;
            diag[m - n + col.length] = true;
            antidiag[m + n] = true;
            res = helper(res, col, diag, antidiag, n+1);
            col[m] = false;
            diag[m - n + col.length] = false;
            antidiag[m + n] = false;
        }
        return res;
    }

}
