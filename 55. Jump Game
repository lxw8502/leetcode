class Solution {
    public boolean canJump(int[] nums) {
        if(nums.length == 1) return true;
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        for(int i = 1; i <= dp[i - 1]; i++){
            dp[i] =Math.max(dp[i-1], i + nums[i]); 
            if(dp[i] >= nums.length - 1) return true;
            else if(i == dp[i]) return false;
        }
        return false;
        
    }
}


class Solution {
    public boolean canJump(int[] nums) {
        if(nums.length == 1) return true;
        int reach = nums[0];
        for(int i = 1; i <= Math.min(reach, nums.length - 1) ; i++){
            reach =Math.max(reach, i + nums[i]); 
        }
        return reach >= nums.length - 1;
    }
}

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length, reach = 0;
        for (int i = 0; i < n; ++i) {
            if (i > reach || reach >= n - 1) break;
            reach = Math.max(reach, i + nums[i]);
        }
        return reach >= n - 1;
    }
}

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        for(int i = 1; i < n; ++i) {
            dp[i] = Math.max(dp[i - 1], nums[i - 1]) - 1;
            if(dp[i] < 0) return false;
        }
        return true;
    }
}
