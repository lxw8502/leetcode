class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> out = new ArrayList<>();
        Arrays.sort(candidates);
        combinationSumSub(candidates, target, 0, res, out);
        return res;
    }
    private void combinationSumSub(int[] candidates, int target, int start, List<List<Integer>> res, List<Integer> out){
        if(target < 0) return;
        if(target == 0){
            List<Integer> temp = new ArrayList<>();
            temp.addAll(out);
            res.add(temp);
            return;
        }
        for(int i = start; i < candidates.length; i++){
            if(i > start && candidates[i] == candidates[i-1]) continue;
            out.add(candidates[i]);
            combinationSumSub(candidates, target - candidates[i], i+1, res, out);
            out.remove(out.size()-1);
        }
    }
}
