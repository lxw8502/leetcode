class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length; 
        for(int i = 0; i < n/2; i++){
            for(int j = i; j < n-1-i; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n - 1 - j][i];
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
                matrix[j][n - 1 - i] = temp;
            }
        }
    }
}

//沿对角线反转，再沿中轴反转
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length; 
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i; ++j) {
                swap(matrix, i, j , n - 1- j, n - 1 - i);
            }
        }
        for(int i = 0; i < n/2; i++){
            swap(matrix, i, n - 1 - i);
        }
    }
    private void swap(int[][] matrix, int m, int n){
        int[] temp = matrix[m];
        matrix[m] = matrix[n];
        matrix[n] = temp;
    }
    private void swap(int[][] matrix, int m, int n, int x, int y){
        int temp = matrix[m][n];
        matrix[m][n] = matrix[x][y];
        matrix[x][y] = temp;
    }
}
