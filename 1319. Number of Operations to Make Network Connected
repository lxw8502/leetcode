//Union find
class Solution {
    public static int findParent(int[] par, int i) {
        while(i != par[i]) i = par[i];
        return i;
    }
    public int makeConnected(int n, int[][] connections) {
        int m = connections.length;
        if(n > m + 1) return -1;
        int[] parent = new int[n];
        for(int i = 0; i < n; i++) parent[i] = i;
        int components = 0;
        for(int i = 0; i < m; i++) {
            int p1 = findParent(parent, connections[i][0]);
            int p2 = findParent(parent, connections[i][1]);
            if(p1 != p2) parent[p1] = p2;
        }
        for(int i = 0; i < n; i++) if(parent[i] == i) components++;
        return components - 1;
    }
}

class Solution {
    private int[] root; // components roots.
    private int count; // # of components. 
    public int makeConnected(int n, int[][] connections) {
        count = n; // # of nodes.
        root = IntStream.range(0, n).toArray(); // Initialization of the roots of the nodes to themselves.
        for (int[] c : connections) { union(c[0], c[1]); } //  if the 2 connected nodes are NOT in the same component yet, merge their components. 
        return connections.length < n - 1 ? -1 : Math.max(0, count - 1);
    }
    private int find(int x) {
        while (x != root[x]) x = root[x];
        return x;
    }
    private void union(int x, int y) {
        int rx = find(x), ry = find(y);
        if (rx == ry) return;
        root[rx] = ry; 
        --count;
    }
}

//基于宽度优先遍历的搜索，会超时。
class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(n > connections.length + 1) return -1;
        boolean[] visited = new boolean[n];
        int res = 0;
        ArrayList<Integer> fronter = new ArrayList<>();
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                visited[i] = true;
                fronter.add(i);
                while(!fronter.isEmpty()){
                    int m = fronter.remove(0);
                    for(int j = 0; j < connections.length; j++){
                        int a = connections[j][0], b =connections[j][1];
                        if(a == m && !visited[b]){
                            fronter.add(b);
                            visited[b] = true;
                        }else if(b == m && !visited[a]){
                            fronter.add(a);
                            visited[a] = true;
                        }
                    }
                }
                res++;
            }
        }
        return res-1;
    }
}
