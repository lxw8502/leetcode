class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                board[i][j]='.';
            }
        }
        int m = 0;
        helper(res, board, m);
        return res;
    }
    private void helper(List<List<String>> res, char[][] board, int n){
        if(n >= board.length){
            List<String> list = new ArrayList<>();
            for(int i = 0; i < board.length; i++){
                list.add(String.valueOf(board[i]));
            }
            res.add(list);
            return;
        }
        for(int i = 0; i < board.length; i++){
            if(isValid(board, n, i)){
                board[n][i] = 'Q';
                helper(res, board, n+1);
                board[n][i] = '.';
            }
        }
    }
    private boolean isValid(char[][] board, int row, int col){
        for(int i = 0; i < row; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }
}


class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        int[] board = new int[n];
        for(int i=0;i<n;++i){
            board[i] = -1;
        }
        int m = 0;
        helper(res, board, m);
        return res;
    }
    private void helper(List<List<String>> res, int[] board, int n){
        if(n >= board.length){
            List<String> list = new ArrayList<>();
            char[][] arr2 = new char[board.length][board.length];
            for(int i = 0; i < board.length; i++){
                for(int j = 0; j < board.length; j++){
                    if(j == board[i]){
                        arr2[i][j] = 'Q';
                    }else{
                        arr2[i][j] = '.';
                    }
                }
                list.add(String.valueOf(arr2[i]));
            }
            res.add(list);
            return;
        }
        for(int i = 0; i < board.length; i++){
            if(isValid(board, n, i)){
                board[n] = i;
                helper(res, board, n+1);
                board[n] = -1;
            }
        }
    }
    private boolean isValid(int[] board, int row, int col){
        for(int i = 0; i < row; i++){
            if(board[i] == col || Math.abs(row - i) == Math.abs(col - board[i])){
                return false;
            }
        }
        return true;
    }
}
