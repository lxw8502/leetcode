//计数排序， 俩次遍历
class Solution {
    public void sortColors(int[] nums) {
        int[] temp = new int[3];
        for(int num : nums){
            temp[num]++;
        }
        for(int i = 0, cur = 0; i < 3; i++){
            for(int j = 0; j < temp[i]; j++){
                nums[cur++] = i;
            }
        }
    }
}

//双指针, 一次遍历
class Solution {
    public void sortColors(int[] nums) {
        int red = 0, blue = nums.length - 1;
        for (int i = 0; i <= blue; i++){
            if(nums[i] == 0){
                swap(nums, i, red);
                red++;
            }else if(nums[i] == 2){
                swap(nums, i, blue);
                blue--;
                i--;
            }
        }
    }
    private void swap(int[] nums, int m, int n){
        int temp = nums[m];
        nums[m] = nums[n];
        nums[n] = temp;
    }
}

class Solution {
    public void sortColors(int[] nums) {
        int red = 0, blue = nums.length - 1, cur = 0;
        while(cur <= blue){
            if(nums[cur] == 0){
                swap(nums, cur++, red++);
            }else if(nums[cur] == 2){
                swap(nums, cur, blue--);
            }else{
                cur++;
            }
        }
    }
    private void swap(int[] nums, int m, int n){
        int temp = nums[m];
        nums[m] = nums[n];
        nums[n] = temp;
    }
}
