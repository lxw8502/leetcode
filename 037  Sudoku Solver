class Solution {
    public void solveSudoku(char[][] board) {
        helper(board, 0, 0);
    }
    private boolean helper(char[][] board, int i, int j){
        if(i == 9) return true;
        if(j >= 9) return helper(board, i+1, 0);
        if(board[i][j] != '.') return helper(board, i, j + 1);
        for(char c = '1'; c <= '9'; c++){
            if(!isValid(board, i, j, c)) continue;
            board[i][j] = c;
            if(helper(board, i, j+1)) return true;
            board[i][j] = '.';
        }
        return false;
    }
    private boolean isValid(char[][] board, int i, int j, char val){
        for(int n = 0; n < 9; n++){
            if(board[i][n] == val) return false;
        }
        for(int n = 0; n < 9; n++){
            if(board[n][j] == val) return false;
        }
        for(int n = 0; n < 3; n++){
            for(int m = 0; m < 3; m++){
                if(board[(i/3)*3+n][(j/3)*3+m] == val) return false;
            }
        }
        return true;
    }
}
