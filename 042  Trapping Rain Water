class Solution {
    public int trap(int[] height) {
        int[] dp = new int[height.length];
        int mx = 0, res = 0;
        for(int i =0; i < height.length; i++){
            dp[i] = mx;
            mx = Math.max(mx, height[i]);
        }
        mx = 0;
        for(int j = height.length-1; j>=0; j--){
            dp[j] = Math.min(mx, dp[j]);
            mx = Math.max(mx, height[j]);
            if(dp[j] > height[j]){
                res += dp[j] - height[j];
            }
        }
        return res;
    }
}

//stack
class Solution {
    public int trap(int[] height) {
        Stack<Integer> st = new Stack<>();
        int res = 0, n = height.length, i = 0;
        while(i < n){
            if(st.isEmpty() || height[i] <= height[st.peek()]){
                st.push(i++);
            }else{
                int t = st.pop();
                if(st.isEmpty()) continue;
                res += (Math.min(height[st.peek()],height[i]) - height[t]) * (i - st.peek() - 1);
            }
        }
        return res;
    }
}
