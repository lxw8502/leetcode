class Solution {
    public String addBinary(String a, String b) {
        int m = a.length(), n = b.length();
        String s = "";
        if(m > n){
            for(int i = 0; i < m - n; i++){
                s += "0";
            }
            b = s + b;
        }else{
            for(int i = 0; i < n - m; i++){
                s += "0";
            }
            a = s + a;
        }
        Stack<Character> st = new Stack<>();
        int jinwei = 0;
        for(int i = a.length() - 1; i >= 0; i--){
            int sum = (a.charAt(i) - '0') + (b.charAt(i) -'0') + jinwei;
            if(sum >= 2){
                st.push(String.valueOf(sum % 2).charAt(0));
                jinwei = 1;
            }else if(sum == 1){
                st.push('1');
                jinwei = 0;
            }else{
                st.push('0');
                jinwei = 0;
            }
        }
        if(jinwei == 1) st.push('1');
        String res = "";
        while(!st.empty()){
            res += st.pop();
        }
        return res;
    }
}

class Solution {
    public String addBinary(String a, String b) {
        if (a.length() < b.length()) {
            String temp = a;
            a = b;
            b = temp;
        }
        
        char[] result = new char[a.length() + 1];
        boolean overflowBit = false;
        for (int i = a.length() - 1; i >= 0; --i) {
            int bIndex = i - (a.length() - b.length());

            int bitValue = (a.charAt(i) == '1') ? 1 : 0;
            bitValue += (bIndex >= 0 && b.charAt(bIndex) == '1') ? 1 : 0;
            bitValue += (overflowBit) ? 1 : 0;
            
            overflowBit = bitValue > 1;
            result[i + 1] = (bitValue % 2 == 1) ? '1' : '0';
        }
        result[0] = (overflowBit) ? '1' : '0';

        if (overflowBit) {
            return String.valueOf(result);
        } else {
            return String.valueOf(result, 1, result.length - 1);
        }
    }
}

class Solution {
    public String addBinary(String a, String b) {
        String res = "";
        int m = a.length() - 1, n = b.length() - 1, carry = 0;
        while (m >= 0 || n >= 0) {
            int p = m >= 0 ? a.charAt(m--) - '0' : 0;
            int q = n >= 0 ? b.charAt(n--) - '0' : 0;
            int sum = p + q + carry;
            res = String.valueOf(sum % 2) + res;
            carry = sum / 2;
        }
        return carry == 1 ? "1" + res : res;
    }
}
