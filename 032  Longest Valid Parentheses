class Solution {
    public int longestValidParentheses(String s) {
        int res = 0, start = 0;
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i<s.length(); i++){
            if(s.charAt(i) == '('){
                st.push(i);
            }else{
                if(st.empty()){
                    start = i+1;
                }else{
                    st.pop();
                    res = st.empty() ? Math.max(res, i - start + 1) : Math.max(res, i - st.peek()); 
                }
            }
        }
        return res;
    }
}


class Solution {
    public int longestValidParentheses(String s) {
        int res = 0, left = 0, right = 0, n = s.length();
        for (int i = 0; i < n; ++i) {
            if(s.charAt(i) == '(') {
                ++left;
            } else{
                ++right;
            }  
            if (left == right) res = Math.max(res, 2 * right);
            else if (right > left) left = right = 0;
        }
        left = right = 0;
        for (int i = n - 1; i >= 0; --i) {
            if(s.charAt(i) == '(') {
                ++left;
            } else{
                ++right;
            }  
            if (left == right) res = Math.max(res, 2 * left);
            else if (left > right) left = right = 0;
        }
        return res;
    }
}

// Dynamic Programming
class Solution {
    public int longestValidParentheses(String s) {
        int res =0, n = s.length();
        int[] temp = new int[n+1];
        for(int i = 1; i <= n; i++){
            int j = i - 2 - temp[i-1];
            if(s.charAt(i-1) == '(' || j < 0 || s.charAt(j) == ')'){
                temp[i] = 0;
            }else{
                temp[i] = 2 + temp[i-1] + temp[j];
                res = Math.max(res, temp[i]);
            }
        }
        return res;
    }
}


