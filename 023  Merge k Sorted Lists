/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) return null;
        int n = lists.length;
        while (n > 1) {
            int k = (n + 1) / 2;
            for (int i = 0; i < n / 2; ++i) {
                lists[i] = mergeTwoLists(lists[i], lists[i + k]);
            }
            n = k;
        }
        return lists[0];
    }
    private ListNode mergeTwoLists(ListNode node1, ListNode node2){
        ListNode start = new ListNode(-1);
        ListNode cur = start;
        while(node1 != null && node2 != null){
            if(node1.val < node2.val){
                cur.next = node1;
                node1 = node1.next;
            }else{
                cur.next = node2;
                node2 = node2.next;
            }
            cur = cur.next;
        }
        cur.next = (node1 != null) ? node1 : node2;
        return start.next;
    }
}


//优先级队列
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        Comparator<ListNode> comparator = new Comparator<ListNode>() {
            @Override
            public int compare(ListNode l1, ListNode l2) {
                return (l1.val - l2.val);
            }
        };
        Queue<ListNode> queue = new PriorityQueue<>(comparator);
        for(int i = 0; i < lists.length; i++){
            if(lists[i] instanceof ListNode){
                queue.offer(lists[i]);
            }
        }
        ListNode start = queue.poll();
        ListNode cur = start;
        while(queue.size() != 0 ){
            if(cur.next != null){
                queue.offer(cur.next);
            }
            cur.next = queue.poll();
            cur = cur.next;
        }
        return start;
    }
}

//divide and conquer
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) return null;
        return mergeKListsCD(lists, 0, lists.length-1);
    }
    private ListNode mergeKListsCD(ListNode[] lists, int m, int n){
        if(m == n){
            return lists[m];
        }
        ListNode left = mergeKListsCD(lists, m, (m+n)/2);
        ListNode right = mergeKListsCD(lists, (m+n)/2+1, n);
        return merge(left, right);
    }
    private ListNode merge(ListNode left, ListNode right){
        ListNode start = new ListNode(-1);
        ListNode cur = start;
        while(left != null && right !=null){
            if(left.val < right.val){
                cur.next = left;
                left = left.next;
            }else{
                cur.next = right;
                right = right.next;
            }
            cur = cur.next;
        }
        cur.next = (left == null) ? right : left;
        return start.next;
    }
}
