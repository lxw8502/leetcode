class Solution {
    public void nextPermutation(int[] nums) {
        for(int i = nums.length - 2; i >= 0; i--){
            if(nums[i] < nums[i+1]){
                for(int j = nums.length - 1; j > i; j--){
                    if(nums[i] < nums[j]){
                      swap(nums, i, j);
                      break;
                    }
                }
                for(int m = i+1, n = nums.length-1; m < n; m++,n--){
                    swap(nums, m, n);
                }
                return;
            }
        }
        for(int m = 0, n = nums.length-1; m < n; m++,n--){
            swap(nums, m, n);
        }
    }
    void swap(int[] nums, int m, int n){
        int temp = nums[m];
        nums[m] = nums[n];
        nums[n] = temp;
    }
}


class Solution {
public void nextPermutation(int[] nums) {
        int n = nums.length, i = n - 2, j = n - 1;
        while (i >= 0 && nums[i] >= nums[i + 1]) --i;
        if (i >= 0) {
            while (nums[j] <= nums[i]) --j;
            swap(nums, i, j);
        }
        for(int a = i+1, b = nums.length-1; a < b; a++,b--){
            swap(nums, a, b);
        }
    }
    void swap(int[] nums, int m, int n){
        int temp = nums[m];
        nums[m] = nums[n];
        nums[n] = temp;
    }
}
