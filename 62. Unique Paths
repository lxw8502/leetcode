//直接用递归来解会超时。
class Solution {
    public int uniquePaths(int m, int n) {
        return uniquePathsSub(m, n, 0, 0);
    }
    private int uniquePathsSub(int m, int n, int i, int j){
        if(i >= m -1 || j >= n-1){
            return 1;
        }else if(i < m - 1 && j < n - 1){
            return uniquePathsSub(m, n, i + 1, j) + uniquePathsSub(m, n, i, j + 1);
        }else if(i < m - 1){
            return uniquePathsSub(m, n, i + 1, j);
        }else{
            return uniquePathsSub(m, n, i, j + 1);
        }
    }
}

//使用动态规划
class Solution {
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        for(int i = 0; i < n; i++){
            dp[i] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j= 1; j < n; j++){
                dp[j] = dp[j] + dp[j-1];
            }
        }
        return dp[n-1];
    }
    
}

//数学方法
class Solution {
public:
    int uniquePaths(int m, int n) {
        double num = 1, denom = 1;
        int small = m > n ? n : m;
        for (int i = 1; i <= small - 1; ++i) {
            num *= m + n - 1 - i;
            denom *= i;
        }
        return (int)(num / denom);
    }
};
