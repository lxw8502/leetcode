class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[m + 1][n + 1];
        for(int i = 0; i <= n; i++) dp[0][i] = i;
        for(int i = 0; i <= m; i++) dp[i][0] = i;
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(word1.charAt(i - 1) == word2.charAt(j - 1)){
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.min(dp[i-1][j], Math.min(dp[i][j-1],dp[i-1][j-1])) + 1;
                }
            }
        }
        return dp[m][n];
    }
}

class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[m][n];
        return helper(word1, word2, 0, 0, dp);
    }
    private int helper(String word1,String word2, int i, int j, int[][] dp){
        int m = word1.length(), n = word2.length();
        if(i >= m) return n - j;
        if(j >= n) return m - i;
        if(dp[i][j] > 0) return dp[i][j];
        if(word1.charAt(i) == word2.charAt(j)){
            return helper(word1, word2, i + 1, j + 1, dp);
        }else{
            int replace = helper(word1, word2, i + 1, j + 1, dp);
            int insert = helper(word1, word2, i, j + 1, dp);
            int delete = helper(word1, word2, i + 1, j, dp);
            int res = Math.min(replace, Math.min(insert, delete)) + 1;
            return dp[i][j] = res;
        }
        
    }
}
